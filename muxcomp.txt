entity muxcomp is
port(a,b: in bit_vector (3 downto 0);
sel : in bit_vector (1 downto 0);
z:out bit_vector (3 downto 0);







architecture muxcomp2 of muxcomp is
component mux
port( a,b,c,d: in bit_vector(3 downto 0);
sel: in bit_vector(1 downto 0);
output: out bit_vector (3 downto 0));
end component;


signal op: bit;
begin
op1:mux<=
portmap (a(3)&&b(3) and a(2)&&b(2) and a(1)&&b(1) and a(0)&&b(0));
op2:mux
portmap( a(3)&&b(3) or a(2)&&b(2) or a(1)&&b(1) or a(0)&&b(0));
op3:mux
portmap(a(3)&&b(3) xor a(2)&&b(2) xor a(1)&&b(1) xor a(0)&&b(0));
op3:mux
portmap(a(3)&&b(3) nand a(2)&&b(2) nand a(1)&&b(1) nand a(0)&&b(0));

end;

entity mux4ta1 is 
port( a,b,c,d: in bit_vector(3 downto 0);
sel: in bit_vector(1 downto 0);
output: out bit_vector (3 downto 0));

end mux4ta1;

architecture mux of mux4ta1 is
begin 
process( a,b,c,d,sel) is
begin 

if (sel(0) ='0' and sel(1) = '0') then
      output <= a;
  elsif (sel(0) ='1' and sel(1) = '0') then
      output <= c;
  elsif (sel(0) ='0' and sel(1) = '1') then
      output <= b;
  else
      output <= d;
  end if;
end process;
end mux;
 
