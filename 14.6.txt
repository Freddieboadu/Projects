library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;


entity TL is 

port(r,clk,cew, cns: in std_logic; --(reset, clock, sensornorthsouth, sensoreastwest)

light: out std_logic_vector(2 downto 0)); --Green, yellow and red for all the directions

end;

architecture beh of TL is

type state is (nsg,nsy,nsr,ewg,ewy,ewr);-- the state for each light color in each direction
signal cs,ns: state;  -- current state, and next state

	
		begin
		process(r,clk)
		begin
			if(r = '1') then --reset
				cs<=nsg;--to the original state 
			elsif(clk'event AND clk = '1') then
					cs<= ns; 
				end if;
		end process;
		process(cs,cns,cew)
		begin
		case cs is
		when nsg => 
				if(cew = '1' and (cns = '0' or cns = '1')) then
					ns <= nsy;--doesnt change the light
				else
					ns <= nsg;-- stays at the same light
				end if; 
				light<= "000";--the light will be green
			when nsy =>--auto transition so input doesnt matter 
				ns<=nsr;
				light<= "001";		--light will be yellow		
			when nsr =>--auto transition so input doesnt matter 
				ns<= ewg;
				light<= "010";--light will be yellow
			when ewg =>
				if(cns = '1' and (cew = '0' or cew = '1')) then
					ns <= ewy;--doesnt change the light
				else
					ns <= ewg;-- stays at the same light
				end if; 
				light<= "011";--light will be red
			when ewy =>--auto transition so input doesnt matter 
				ns<= ewr;
				light<= "100";
			when ewr =>--auto transition so input doesnt matter 
				ns<= nsg;
				light<= "101";
		end case;		
		end process;
end beh;